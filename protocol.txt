Protocoll documentation of the RollerHoster file sharing protocoll


version: 0.1.4
protocoll: TCP
server_port: 6969

Interaction identification: (x:x)

Table of contents:
    1. Packets
        1.1 Packet layout
        1.2 Packet states
        1.3 Debug codes

    2. Security
        2.1 Authentication

    3. Sync checking
        3.1 Exchange Filetree

    4. File transfer
        4.1 File download
        4.2 File Upload

    5. Debug
        5.1 



1.1 Packet Layout
    The basic Packet Layout consists of for field that are defined in this section.

    Fields:

        Packetlength (how many bits): 2 Bytes
        State: 1 Byte
        Cookie: 2 Bytes
        Data: * Bytes (until the end of the Packet)

    Example:

        packet = 0000000000000111 00000001 0000000000000000 1010010001010101
        or 0000000000000111000000100000000000000001010010001010101

        Packetlength (0000000000000111) + State (00000001) + Cookie (0000000000000000) + Data (1010010001010101)




1.2 Packet states
    Packets send between server and client can have different states depending on there usage:

    states:

        Authentication: 0
        sync checking: 1
        file download: 2
        file upload: 3
        debug: 4

    States a represented in one byte.



1.3 Debug codes
    For a few steps the Client or the Server have to send a debug packet with one byte, containing a specific debug code.
    
    codes:
        (1) File end
        (2) FileDownload end



2.1 Authentication:
    The authentication of the client happens on Connection Start.

    The client begins Communication and sends an authentication request:
        
        (0:1)
        C -> S 
        packetlength: *
        State: 0
        Cookie: 2 zero bytes
        Data: Token(utf-8 to binary)

    The server answers with a "set-cookie" request if the token was valid (cookie is stored in the data field).
    If the token send by the client isn't valid the server closes the connection.
        
        (0:2)
        C <- S 
        packetlength: *
        State: 0
        Cookie: 2 zero bytes
        Data: Cookie (2 bytes)

    The Client is now Authenticated and the conecction is ready to use.
    IMPORTANT: The cookie expires after the connection closes.





3.1 Exchange Filetree
    After the client received the cookie, it requests the filetree of the servers target directory.
    The state is now Sync checking, the cookie has to be included from this state on. The data is set to one zero byte, since it isn't needed for this step.
        
        (1:1)
        C -> S
        packetlength : 6 bytes
        State: 1
        Cookie: Cookie
        Data: 1 zero byte

    After that the server responds with it's filetree, which consists of a single text-file
    The data send from the server containes a list of the files and directorys the server contains, every filename includes a MD5 hash of the file, 
    seperated from the filename using a colon(":").
    The filedata packages a seperated using the hash("#") sign.
    If the shared folder contains file within other folders the server sends th path to the file as a filename (folder/filename:md5-hash)
    The filetree ends with a hash sign.

    Example:
        	filename.txt:9a8fgz05938gh034htg0954hg94hg49hg#afolder/otherfilename.txt:ohwt98p35bg0958zh4905gb490gb490gb458g#
        
        (1:2)
        C <- S
        packetlength: *
        State: 1
        Cookie: Cookie
        Data: Filetree
    
    The client can now compares the servers filetree with his local one.


4.1 File download
    After the client got the directory tree from the server, he sends a request for every file he wants to download.

    We first set the packet state to the file download state.
    Now the client sends a header packet, containing filename and number of chunks.
    The client then requests the file chunk by chunk.
    The client decides by himself how many chunks he wants the file to be splittet into.
    
    (2:1)
    C -> S
    packetlength: *
    State: 2
    Cookie: Cookie
    Data: number of chunks(1 byte) + filename
    
    (2:2)
    C -> S
    packetlength: *
    State: 2
    Cookie: Cookie
    Data: number of chunk(1 byte) + chunk


    After that the server sends the chunks in seperate packets.
    All chunks are stored in the Data field.
    
    (2:3)
    C <- S
    packetlength: *
    State: 2
    Cookie: 2 zero bytes
    Data: chunk
    
    When the client finished sending requests for a file, he indicates the end of it with a debug packet code (1).
    
    (2:4)
    C -> S
    packetlength: 6 bytes
    State: 4
    Cookie: Cookie
    Data: Debug code 1 (1 byte)

    If the client is missing a chunk, he requests the chunk again.
    
    When the client is finished with this phase, he sends a debug packet code (2).
    
    (2:5)
    C -> S
    packetlength: 6 bytes
    State: 4
    Cookie: Cookie
    Data: Debug code 2 (1 byte)


4.2 File upload
    To upload a file, the client first sends a header packet conataining the files name and the number of chunks the file is split into in the Data field.
    The filename is encoded using utf-8

    (3:1)
    C -> S
    packetlength: *
    State: 3
    Cookie: Cookie
    Data: number of chunks (1 byte) + filename

    After that the client proceeds to send the chunks in individuell packet ot the server.
    
    (3:2)
    C -> S
    packetlength: *
    State: 3
    Cookie: Cookie
    Data: number of chunk(1 byte) + chunk
    
    When the client finished sending requests for a file, he indicates the end of it with a debug packet code (1).
    
    (2:4)
    C -> S
    packetlength: 6 bytes
    State: 4
    Cookie: Cookie
    Data: Debug code 1 (1 byte)

    If the server is missing some chunks he sends a packet containing the chunk number and filename of the chunk he is missing in the Data field.
    
    (3:3)
    C <- S
    packetlength: *
    State: 3
    Cookie: 2 zero bytes
    Data: number of chunk(1 byte) + chunk

    If the client receives such a packet he sends the standard upload package back.
