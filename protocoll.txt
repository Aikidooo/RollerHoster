Protocoll documentation of the RollerHoster file sharing protocoll


version: 0.1.1
protocoll: TCP
server_port: 6969



Table of contents:
    1. Packets
        1.1 Packet layout
        1.2 Packet states

    2. Security
        2.1 Authentication

    3. Sync checking


    4. File transfer
        4.1 File download
        4.2 File Upload

    5. Debug
        5.1 



1.1 Packet Layout
    The basic Packet Layout consists of for field that are defined in this section.

    Fields:

        Packetlength (how many bits): 2 Bytes
        State: 1 Byte
        Cookie: 2 Bytes
        Data: * Bytes (until the end of the Packet)

    Example:

        packet = 0000000000000111 00000001 0000000000000000 1010010001010101
        or 0000000000000111000000100000000000000001010010001010101

        Packetlength (0000000000000111) + State (00000001) + Cookie (0000000000000000) + Data (1010010001010101)




1.2 Packet states
    Packets send between server and client can have different states depending on there usage:

    states:

        Authentication: 0
        sync checking: 1
        file download: 2
        file upload: 3
        debug: 4

    States a represented in one Byte.






2.1 Authentication:
    The authentication of the client happens on Connection Start.

    The client begins Communication and sends an authentication request:

        C -> S
        packetlength: *
        State: 0
        Cookie: 2 zero bytes
        Data: Token(utf-8 to binary)

    The server answers with a "set-cookie" request if the token was valid (cookie is stored in the cookie field).
    If the token send by the client isn't valid the server closes the connection.

        C <- S
        packetlength: *
        State: 0
        Cookie: 2 zero bytes
        Data: Cookie (2 bytes)

    The Client is now Authenticated and the conecction is ready to use.
    IMPORTANT: The cookie expires after the connection closes.




4.1 File download
    After the client got the directory tree from the server, he sends a request for every file the client wants to download.

    We first set the packet state to the file download state.
    The client then requests the file chunk per chunk.
    The client decides by himself how many chunks he wants the file to be splittet into.
    

    C -> S
    packetlength: *
    State: 2
    Cookie: Cookie
    Data: chunk number(1 byte) + number of chunks(1 byte) + filename


    After that the server sends the chunks in seperate packets.
    All chunks are stored in the Data field.

    C <- S
    packetlength: *
    State: 2
    Cookie: 2 zero bytes
    Data: chunk

    If the client is missing a chunk, he requests the chunk again.




4.2 File upload
    To upload a file, the client first sends a header packet conataining the files name and the number of chunks the file is split into in the Data field.
    The filename is encoded using utf-8

    C -> S
    packetlength: *
    State: 3
    Cookie: Cookie
    Data: number of chunks (1 byte) + filename

    After that the client proceeds to send the chunks in individuell packet ot the server.

    C -> S
    packetlength: *
    State: 3
    Cookie: Cookie
    Data: number of chunk(1 byte) + chunk

    If the server is missing some chunks he sends a packet containing the chunk number and filename of the chunk he is missing in the Data field.

    C <- S
    packetlength: *
    State: 3
    Cookie: 2 zero bytes
    Data: number of chunk(1 byte) + chunk

    If the client receives such a packet he sends the standard upload package back.